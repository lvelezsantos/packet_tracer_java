/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Point;
import java.awt.Robot;
import logica.Router;

/**
 *
 * @author warlock
 */
public class JDialogConsola extends javax.swing.JDialog {
    
    /**
     * Creates new form JDialogConsola
     */
    
    /*
     * Comandos
     * 
     * enable
     * configure terminal
     * router vector
     * interface fastEthernet modulo/puerto
     * ip address ip netmask
     * exit
     * 
     */
    
    Controlador controlador;
    int id_router;
    private String nivel;
    private static String nivel_normal = ">";
    private static String nivel_enable = "#";
    private static String nivel_configure_terminal = "(config)#";
    private static String nivel_router_vector = "(config-router)#";
    private static String nivel_interface = "(config-if)#";
    
    public JDialogConsola(java.awt.Frame parent, boolean modal, Controlador controlador, int id_router) {
        super(parent, modal);
        initComponents();
        nivel = nivel_normal;
        this.controlador = controlador;
        this.id_router = id_router;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsola = new javax.swing.JTextArea();
        jTextFieldComando = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextAreaConsola.setEditable(false);
        jTextAreaConsola.setColumns(20);
        jTextAreaConsola.setRows(5);
        jScrollPane1.setViewportView(jTextAreaConsola);

        jTextFieldComando.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldComandoKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldComandoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addComponent(jTextFieldComando))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldComando, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldComandoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldComandoKeyTyped
       
    }//GEN-LAST:event_jTextFieldComandoKeyTyped

    String eliminar_espacios(String cadena){
        String cadena_sin_espacios=cadena.trim();
        
        while(!cadena_sin_espacios.replaceAll("  ", " ").equals(cadena_sin_espacios)){ 
            cadena_sin_espacios = cadena_sin_espacios.replaceAll("  ", " ");
        }
        
        return cadena_sin_espacios;
    }
    
    private void jTextFieldComandoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldComandoKeyPressed
        if(evt.getKeyCode()==10){
            String comando = jTextFieldComando.getText();
            comando = eliminar_espacios(comando);
            jTextAreaConsola.append("Router1"+nivel+comando+"\n");
            if(nivel.equals(nivel_normal)){
                if(comando.equals("enable")){
                    nivel = nivel_enable;
                }
            }
            if(nivel.equals(nivel_enable)){
                if(comando.equals("configure terminal")) {
                    nivel = nivel_configure_terminal;
                }
            }
            if(nivel.equals(nivel_configure_terminal)){
                if(comando.equals("router vector")){
                    nivel = nivel_router_vector;
                }
                
                if(comando.length()>21){
                    if(comando.substring(0, 22).equals("interface fastEthernet")) {
                        String[] lista_coms;
                        lista_coms = comando.split(" ");
                        String[] lista_modulo_puerto;
                        lista_modulo_puerto = lista_coms[2].split("/");
                        if(lista_modulo_puerto.length == 2 ){
                            String modulo = lista_modulo_puerto[0];
                            String puerto = lista_modulo_puerto[1];
                            nivel = nivel_interface;
                        }

                    }

                }

            }
            
            if(nivel.equals(nivel_interface)){
                String[] list_ip_addres;
                list_ip_addres = comando.split(" ");
                 
                if(list_ip_addres.length==4){
                    if(list_ip_addres[0].equals("ip") && list_ip_addres[1].equals("address")){
                        String ip = comando.split(" ")[2];
                        String netmask = comando.split(" ")[3];
                    }                        
                }
            }
            
            
            if(comando.equals("exit")){
                if(nivel.equals(nivel_interface)){
                    nivel = nivel_configure_terminal;
                }else if(nivel.equals(nivel_router_vector)){
                    nivel = nivel_configure_terminal;
                }else if(nivel.equals(nivel_configure_terminal)){
                    nivel = nivel_enable;
                }else if(nivel.equals(nivel_enable)){
                    nivel = nivel_normal;
                }
               
            }
                
            jTextFieldComando.setText("");
        }
    }//GEN-LAST:event_jTextFieldComandoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogConsola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogConsola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogConsola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogConsola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogConsola dialog = new JDialogConsola(new javax.swing.JFrame(), true,new Controlador(), 1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsola;
    private javax.swing.JTextField jTextFieldComando;
    // End of variables declaration//GEN-END:variables
}
